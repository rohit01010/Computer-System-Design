// 16 Bit 2to1 Multiplexer
CHIP Multiplexer16Bit2to1
{

IN x0[16],x1[16],s;
OUT y[16];

PARTS:
Not(in=s,out=nots);

And(a=x0[0],b=nots,out=c00);
And(a=x1[0],b=s,out=c01);
Or(a=c00,b=c01,out=y[0]);

And(a=x0[1],b=nots,out=c10);
And(a=x1[1],b=s,out=c11);
Or(a=c10,b=c11,out=y[1]);

And(a=x0[2],b=nots,out=c20);
And(a=x1[2],b=s,out=c21);
Or(a=c20,b=c21,out=y[2]);

And(a=x0[3],b=nots,out=c30);
And(a=x1[3],b=s,out=c31);
Or(a=c30,b=c31,out=y[3]);

And(a=x0[4],b=nots,out=c40);
And(a=x1[4],b=s,out=c41);
Or(a=c40,b=c41,out=y[4]);

And(a=x0[5],b=nots,out=c50);
And(a=x1[5],b=s,out=c51);
Or(a=c50,b=c51,out=y[5]);

And(a=x0[6],b=nots,out=c60);
And(a=x1[6],b=s,out=c61);
Or(a=c60,b=c61,out=y[6]);

And(a=x0[7],b=nots,out=c70);
And(a=x1[7],b=s,out=c71);
Or(a=c70,b=c71,out=y[7]);

And(a=x0[8],b=nots,out=c80);
And(a=x1[8],b=s,out=c81);
Or(a=c80,b=c81,out=y[8]);

And(a=x0[9],b=nots,out=c90);
And(a=x1[9],b=s,out=c91);
Or(a=c90,b=c91,out=y[9]);

And(a=x0[10],b=nots,out=c100);
And(a=x1[10],b=s,out=c101);
Or(a=c100,b=c101,out=y[10]);

And(a=x0[11],b=nots,out=c110);
And(a=x1[11],b=s,out=c111);
Or(a=c110,b=c111,out=y[11]);

And(a=x0[12],b=nots,out=c120);
And(a=x1[12],b=s,out=c121);
Or(a=c120,b=c121,out=y[12]);

And(a=x0[13],b=nots,out=c130);
And(a=x1[13],b=s,out=c131);
Or(a=c130,b=c131,out=y[13]);

And(a=x0[14],b=nots,out=c140);
And(a=x1[14],b=s,out=c141);
Or(a=c140,b=c141,out=y[14]);

And(a=x0[15],b=nots,out=c150);
And(a=x1[15],b=s,out=c151);
Or(a=c150,b=c151,out=y[15]);

}